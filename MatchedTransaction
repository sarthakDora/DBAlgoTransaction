CREATE or alter PROCEDURE MatchTransactions
AS
BEGIN
    SET XACT_ABORT ON;
    BEGIN TRANSACTION;

    -- Create a temporary table to track remaining buy units
    CREATE TABLE #BuyUnits (
        Transaction_ID INT,
        Account_ID INT,
        Security_ID INT,
        Units INT,
        Price DECIMAL(10, 2)
    );

    -- Populate temporary table with current buy data
    INSERT INTO #BuyUnits (Transaction_ID, Account_ID, Security_ID, Units, Price)
    SELECT Transaction_ID, Account_ID, Security_ID, Units, Price
    FROM Buy_Transaction_Table;

    -- Process each sell transaction only if total available buy units are sufficient
    DECLARE @AccountID INT, @SecurityID INT, @SellTransactionID INT, @SellUnits INT, @SellPrice DECIMAL(10,2);

    -- Cursor to iterate over sell transactions
    DECLARE sell_cursor CURSOR FOR
    SELECT Transaction_ID, Account_ID, Security_ID, Units, Price
    FROM Sell_Transaction_Table
    ORDER BY Account_ID, Security_ID, Trade_Date;

    OPEN sell_cursor;

    FETCH NEXT FROM sell_cursor INTO @SellTransactionID, @AccountID, @SecurityID, @SellUnits, @SellPrice;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Check if there are enough buy units to cover the sell units for this account and security
        DECLARE @TotalBuyUnits INT;
        SELECT @TotalBuyUnits = SUM(Units)
        FROM #BuyUnits
        WHERE Account_ID = @AccountID AND Security_ID = @SecurityID;

        IF @TotalBuyUnits >= @SellUnits
        BEGIN
            -- Process the sell units
            DECLARE @RemainingSellUnits INT = @SellUnits;

            WHILE @RemainingSellUnits > 0
            BEGIN
                DECLARE @BuyTransactionID INT, @BuyUnitsAvailable INT, @BuyPrice DECIMAL(10,2);

                SELECT TOP 1 @BuyTransactionID = Transaction_ID, @BuyUnitsAvailable = Units, @BuyPrice = Price
                FROM #BuyUnits
                WHERE Account_ID = @AccountID AND Security_ID = @SecurityID AND Units > 0
                ORDER BY Transaction_ID;

                IF @BuyTransactionID IS NOT NULL
                BEGIN
                    DECLARE @UnitsToTransfer INT = CASE
                        WHEN @RemainingSellUnits <= @BuyUnitsAvailable THEN @RemainingSellUnits
                        ELSE @BuyUnitsAvailable
                    END;

                    -- Update buy units
                    UPDATE #BuyUnits
                    SET Units = Units - @UnitsToTransfer
                    WHERE Transaction_ID = @BuyTransactionID;

                    -- Insert into final output
                    INSERT INTO Final_Output_Table (Account_ID, Security_ID, Sell_Trade_Date, Sell_Units, Sell_Price, Buy_Price, Buy_Transaction_ID)
                    VALUES (@AccountID, @SecurityID, CURRENT_TIMESTAMP, @UnitsToTransfer, @SellPrice, @BuyPrice, @BuyTransactionID);

                    SET @RemainingSellUnits -= @UnitsToTransfer;
                END
                ELSE
                BEGIN
                    BREAK; -- Exit if no more buy transactions are available
                END
            END
        END

        -- Fetch the next sell transaction
        FETCH NEXT FROM sell_cursor INTO @SellTransactionID, @AccountID, @SecurityID, @SellUnits, @SellPrice;
    END

    CLOSE sell_cursor;
    DEALLOCATE sell_cursor;

    COMMIT TRANSACTION;
END
GO
