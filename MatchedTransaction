CREATE OR ALTER PROCEDURE MatchTransactions
AS
BEGIN
    SET XACT_ABORT ON;
    BEGIN TRANSACTION;

    -- Create a temporary table to track remaining buy units
    CREATE TABLE #BuyUnits (
        Transaction_ID INT,
        Account_ID INT,
        Security_ID INT,
        Trade_Date DATE,
        Units INT,
        Price DECIMAL(10, 2)
    );

    -- Populate temporary table with current buy data
    INSERT INTO #BuyUnits (Transaction_ID, Account_ID, Security_ID, Trade_Date, Units, Price)
    SELECT Transaction_ID, Account_ID, Security_ID, Trade_Date, Units, Price
    FROM Buy_Transaction_Table;

    -- Cursor to check each combination of account_id and security_id from sell transactions
    DECLARE @AccountID INT, @SecurityID INT, @TotalSellUnits INT, @TotalBuyUnits INT;

    DECLARE check_cursor CURSOR FOR
    SELECT st.Account_ID, st.Security_ID, SUM(st.Units) AS TotalSellUnits
    FROM Sell_Transaction_Table st
    GROUP BY st.Account_ID, st.Security_ID;

    OPEN check_cursor;
    FETCH NEXT FROM check_cursor INTO @AccountID, @SecurityID, @TotalSellUnits;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Calculate total available buy units for the combination
        SELECT @TotalBuyUnits = ISNULL(SUM(Units), 0)
        FROM #BuyUnits
        WHERE Account_ID = @AccountID AND Security_ID = @SecurityID;

        -- Proceed only if there are enough buy units to cover all sell units
        IF @TotalBuyUnits >= @TotalSellUnits
        BEGIN
            -- Process each sell transaction only if the total buy units meet or exceed the sell requirements
            DECLARE sell_cursor CURSOR FOR
            SELECT Transaction_ID, Units, Price
            FROM Sell_Transaction_Table
            WHERE Account_ID = @AccountID AND Security_ID = @SecurityID
            ORDER BY Trade_Date, Transaction_ID;  -- Updated ORDER BY clause

            OPEN sell_cursor;
            DECLARE @SellTransactionID INT, @SellUnits INT, @SellPrice DECIMAL(10,2);

            FETCH NEXT FROM sell_cursor INTO @SellTransactionID, @SellUnits, @SellPrice;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                DECLARE @RemainingSellUnits INT = @SellUnits;

                WHILE @RemainingSellUnits > 0
                BEGIN
                    DECLARE @BuyTransactionID INT, @BuyUnitsAvailable INT, @BuyPrice DECIMAL(10,2);

                    -- Order by Trade_Date and Transaction_ID for buy transactions
                    SELECT TOP 1 @BuyTransactionID = Transaction_ID, @BuyUnitsAvailable = Units, @BuyPrice = Price
                    FROM #BuyUnits
                    WHERE Account_ID = @AccountID AND Security_ID = @SecurityID AND Units > 0
                    ORDER BY Trade_Date, Transaction_ID;  -- Updated ORDER BY clause

                    DECLARE @UnitsToTransfer INT = CASE
                        WHEN @RemainingSellUnits <= @BuyUnitsAvailable THEN @RemainingSellUnits
                        ELSE @BuyUnitsAvailable
                    END;

                    UPDATE #BuyUnits
                    SET Units = Units - @UnitsToTransfer
                    WHERE Transaction_ID = @BuyTransactionID;

                    INSERT INTO Final_Output_Table (Account_ID, Security_ID, Sell_Trade_Date, Sell_Units, Sell_Price, Buy_Price, Buy_Transaction_ID)
                    VALUES (@AccountID, @SecurityID, CURRENT_TIMESTAMP, @UnitsToTransfer, @SellPrice, @BuyPrice, @BuyTransactionID);

                    SET @RemainingSellUnits -= @UnitsToTransfer;
                END

                FETCH NEXT FROM sell_cursor INTO @SellTransactionID, @SellUnits, @SellPrice;
            END

            CLOSE sell_cursor;
            DEALLOCATE sell_cursor;
        END

        FETCH NEXT FROM check_cursor INTO @AccountID, @SecurityID, @TotalSellUnits;
    END

    CLOSE check_cursor;
    DEALLOCATE check_cursor;

    COMMIT TRANSACTION;
END
GO
