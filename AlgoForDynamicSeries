using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Aspose.Cells;
using System.Linq;

public class FactsheetPerformanceChartData
{
    public int PeriodSortOrder { get; set; }
    public string PeriodName { get; set; }
    public string SeriesAggType { get; set; }
    public string AttributeType { get; set; }
    public string SeriesName { get; set; }
    public string SeriesDisplayName { get; set; }
    public decimal SeriesValue { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
}

class Program
{
    static void Main()
    {
        // Assuming you have the connection string for your database
        string connectionString = "your_connection_string";
        List<FactsheetPerformanceChartData> data = FetchPerformanceData(connectionString);

        // Extract unique SeriesNames dynamically from the data
        var uniqueSeriesNames = data.Select(d => d.SeriesDisplayName).Distinct().ToList();

        // Create the Aspose.Cells workbook and worksheet
        Workbook workbook = new Workbook();
        Worksheet worksheet = workbook.Worksheets[0];

        // Define headers in the worksheet
        worksheet.Cells[0, 0].PutValue("PeriodSortOrder");
        worksheet.Cells[0, 1].PutValue("PeriodName");

        // Dynamically add the SeriesDisplayName as column headers starting from index 2
        int seriesStartColumn = 2;
        for (int i = 0; i < uniqueSeriesNames.Count; i++)
        {
            worksheet.Cells[0, seriesStartColumn + i].PutValue(uniqueSeriesNames[i]);
        }

        // Add headers for StartDate and EndDate at the end
        worksheet.Cells[0, seriesStartColumn + uniqueSeriesNames.Count].PutValue("StartDate");
        worksheet.Cells[0, seriesStartColumn + uniqueSeriesNames.Count + 1].PutValue("EndDate");

        // Grouping data by the composite key (without StartDate and EndDate)
        var groupedData = data.GroupBy(d => new
        {
            d.PeriodSortOrder,
            d.PeriodName,
            d.SeriesAggType,
            d.AttributeType,
            d.SeriesName
        }).ToDictionary(g => g.Key, g => g.ToList());

        // Prepare another dictionary to hold the final aggregated result
        var finalData = new Dictionary<string, Dictionary<string, decimal>>();
        var periodDates = new Dictionary<string, (DateTime StartDate, DateTime EndDate)>();

        foreach (var group in groupedData)
        {
            // Composite key based on PeriodSortOrder and PeriodName (for aggregation)
            string periodKey = $"{group.Key.PeriodSortOrder}_{group.Key.PeriodName}";

            // Initialize dictionary if not already done
            if (!finalData.ContainsKey(periodKey))
            {
                finalData[periodKey] = new Dictionary<string, decimal>();

                // Initialize all series to 0
                foreach (var seriesName in uniqueSeriesNames)
                {
                    finalData[periodKey][seriesName] = 0;
                }

                // Store start and end dates for this period (from any item in the group)
                var firstItem = group.Value.First();
                periodDates[periodKey] = (firstItem.StartDate, firstItem.EndDate);
            }

            // For each item in the group, map the SeriesDisplayName to the correct SeriesValue
            foreach (var item in group.Value)
            {
                finalData[periodKey][item.SeriesDisplayName] = item.SeriesValue;
            }
        }

        // Insert final aggregated data into the worksheet
        int rowIndex = 1;
        foreach (var entry in finalData)
        {
            var splitKey = entry.Key.Split('_');
            int periodSortOrder = int.Parse(splitKey[0]);
            string periodName = splitKey[1];

            // Insert PeriodSortOrder and PeriodName
            worksheet.Cells[rowIndex, 0].PutValue(periodSortOrder);
            worksheet.Cells[rowIndex, 1].PutValue(periodName);

            // Insert series values
            int columnOffset = seriesStartColumn;
            foreach (var seriesName in uniqueSeriesNames)
            {
                worksheet.Cells[rowIndex, columnOffset].PutValue(entry.Value[seriesName]);
                columnOffset++;
            }

            // Insert StartDate and EndDate from the stored dates
            var dates = periodDates[entry.Key];
            worksheet.Cells[rowIndex, columnOffset].PutValue(dates.StartDate.ToShortDateString());
            worksheet.Cells[rowIndex, columnOffset + 1].PutValue(dates.EndDate.ToShortDateString());

            rowIndex++;
        }

        // Save the Excel file
        workbook.Save("output.xlsx");
    }

    static List<FactsheetPerformanceChartData> FetchPerformanceData(string connectionString)
    {
        List<FactsheetPerformanceChartData> dataList = new List<FactsheetPerformanceChartData>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            using (SqlCommand command = new SqlCommand("YourStoredProcedureName", connection))
            {
                command.CommandType = CommandType.StoredProcedure;

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var data = new FactsheetPerformanceChartData
                        {
                            PeriodSortOrder = Convert.ToInt32(reader["PeriodSortOrder"]),
                            PeriodName = reader["PeriodName"].ToString(),
                            SeriesAggType = reader["SeriesAggType"].ToString(),
                            AttributeType = reader["AttributeType"].ToString(),
                            SeriesName = reader["SeriesName"].ToString(),
                            SeriesDisplayName = reader["SeriesDisplayName"].ToString(),
                            SeriesValue = Convert.ToDecimal(reader["SeriesValue"]),
                            StartDate = Convert.ToDateTime(reader["StartDate"]),
                            EndDate = Convert.ToDateTime(reader["EndDate"])
                        };

                        dataList.Add(data);
                    }
                }
            }
        }

        return dataList;
    }
}
